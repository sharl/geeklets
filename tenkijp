#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json
import os
import sys

import requests
from bs4 import BeautifulSoup


class Tenkijp:
    def __init__(self):
        self.conf = os.environ.get('HOME', '.') + '/.tenkijp'
        self.config = {}

        if os.path.exists(self.conf):
            with open(self.conf) as fd:
                self.config = json.load(fd)
        else:
            self.scan()
            self._make_conf()

    def _make_conf(self):
        with open(self.conf, 'w') as fd:
            fd.write(json.dumps(self.config, indent=2, ensure_ascii=False))

    def add(self, pref, url):
        self.config[pref] = url
        self._make_conf()

    def lookup(self, pref):
        url = self.config.get(pref)
        if not url:
            return []
        else:
            try:
                r = requests.get(url, timeout=10)
                if r and r.status_code == 200:
                    soup = BeautifulSoup(r.content, 'html.parser')
                    # 抽出
                    _lines = []
                    dds = soup.find_all('dd', class_='forecast10days-actab')
                    for dd in dds:
                        divs = dd.find_all('div')

                        days = divs[0].text
                        fore = divs[1].text
                        imgs = divs[1].find('img')
                        icon = os.path.basename(imgs.get('src')).replace('.png', '')
                        tmps = divs[2].find_all('span')
                        th = tmps[0].text
                        tl = tmps[1].text
                        prob = divs[3].text
                        _lines.append([days, fore, icon, th, tl, prob])

                    # 整形
                    lines = []
                    mx = 0
                    spc = ''
                    for line in _lines:
                        mx = len(line[1]) if len(line[1]) > mx else mx
                    for line in _lines:
                        if len(line[1]) < mx:
                            line[1] = line[1] + '\u3000' * (mx - len(line[1]))
                    for line in _lines:
                        _l = f"{line[0]} {line[1]} {line[3]:>4} {line[4]:>4} {line[5]:>4}"
                        lines.append(_l)
                    return lines[:7]
            except Exception as e:
                print(e)

        return []

    def scan(self):
        if not sys.stdout.isatty():
            return

        print('scanning...', end='', flush=True)

        base_url = 'https://tenki.jp'
        with requests.get(base_url) as r:
            soup = BeautifulSoup(r.content, 'html.parser')
            entries = soup.find(class_='common-list-entries')
            prefs = entries.find_all(class_='pref-link')
            for pref in prefs:
                link = base_url + pref.get('href')
                with requests.get(link) as pr:
                    s = BeautifulSoup(pr.content, 'html.parser')
                    point_entries = s.find(id='forecast-others-point-entries')
                    points = point_entries.find_all('li')
                    for point in points:
                        p = point.a.text
                        u = base_url + point.a.get('href') + '10days.html'

                        pr = pref.text
                        if pr.startswith('道'):
                            pr = '北海道'
                        self.config[pr + p] = u

            self._make_conf()

        print('done')


if __name__ == '__main__':
    tenki = Tenkijp()

    alias = point = None
    if len(sys.argv) == 3:
        point = sys.argv[2]
    if len(sys.argv) >= 2:
        alias = sys.argv[1]

    if alias == 'scan':
        tenki.scan()
        exit()

    if point:
        alias, point = sys.argv[1:3]
        if point.startswith('https://tenki.jp'):
            tenki.add(alias, point)
        elif point in tenki.config:
            if alias in tenki.config:
                print(f'{alias} は登録済みです')
            else:
                print(f'{point} を {alias} として登録しました')
                tenki.add(alias, tenki.config[point])
    if alias:
        lines = tenki.lookup(alias)
        if lines:
            for line in lines:
                print(line)
